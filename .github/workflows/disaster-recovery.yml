name: deploy
on:
  workflow-dispatch:

jobs:
  deploy-foundational-services:
    runs-on: ubuntu-latest

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v3
      - name: "Terraform setup"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2
      - name: "Generate kubeconfig"
        working-directory: ./terraform
        run: "./cluster-config-write.sh"
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.3'
      - name: "Create terraform-state namespace"
        working-directory: ./terraform
        run: "kubectl --kubeconfig ./cluster.yml apply -f ./terraform-state-namespace.yml"
      - name: "Terraform format check"
        working-directory: ./terraform/foundation/part1
        run: "terraform fmt -check"
      - name: "Terraform init"
        working-directory: ./terraform/foundation/part1
        run: "terraform init"
      - name: "Terraform plan"
        working-directory: ./terraform/foundation/part1
        run: "terraform plan -input=false"
      - name: "Terraform apply"
        working-directory: ./terraform/foundation/part1
        run: "terraform apply -auto-approve -input=false"
      - name: "Terraform format check"
        working-directory: ./terraform/foundation/part2
        run: "terraform fmt -check"
      - name: "Terraform init"
        working-directory: ./terraform/foundation/part2
        run: "terraform init"
      - name: "Terraform plan"
        working-directory: ./terraform/foundation/part2
        run: "terraform plan -input=false"
      - name: "Terraform apply"
        working-directory: ./terraform/foundation/part2
        run: "terraform apply -auto-approve -input=false"

  # deploy storage (and only storage)
  deploy-ldap-storage:
    needs: deploy-foundational-services

    uses: ./.github/workflows/kubernetes-terraform-deploy-specific-resource-self-hosted-runner.yml
    with:
      terraform-dir: ./terraform/apps/ldap
      resource-name: PLACEHOLDER
    secrets: inherit

  deploy-vaultwarden-storage:
    needs: deploy-foundational-services

    uses: ./.github/workflows/kubernetes-terraform-deploy-specific-resource-self-hosted-runner.yml
    with:
      terraform-dir: ./terraform/apps/vaultwarden
      resource-name: PLACEHOLDER
    secrets: inherit

  # wait for backup data to be restored into the new storage (manual process with approval through an issue)
  wait-for-data-restore:
    runs-on: self-hosted

    steps:
      - name: "Setup node"
        uses: actions/setup-node@v2
      - name: "Wait for approval"
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: jd-chapman
          minimum-approvals: 1
          issue-title: "Restor backup data to new storage"
          issue-body: "Please approve this issue (reply 'approved' or similar) after backup data has been restored to the new storage."
          exclude-workflow-initiator-as-approver: false
  # once approved, deployment can happen as normal
      - name: "Start normal deployment"
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: deployment


