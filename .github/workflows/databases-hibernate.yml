on:
  workflow_dispatch:
    inputs:
      do-hibernate:
        description: 'True to hibernate databases. False to restart.'
        required: true
        default: true
        type: boolean
  workflow_call:
    inputs:
      do-hibernate:
        required: true
        type: boolean

env:
  CLIENT_CERT_DATA: ${{ secrets.KUBE_CLIENT_CERT_DATA }}
  CLIENT_KEY_DATA: ${{ secrets.KUBE_CLIENT_KEY_DATA }}
  CLUSTER_CA_CERT_DATA: ${{ secrets.KUBE_CLUSTER_CA_CERT_DATA }}
  SERVER_KUBE_PORT: ${{ vars.SERVER_KUBE_PORT }}
  SERVER_BASE_DOMAIN: ${{ vars.SERVER_BASE_DOMAIN }}

jobs:
  get-databases:
    runs-on: self-hosted

    outputs:
      databases: ${{ steps.get-databases.outputs.databases}}

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v4
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Generate and install kubeconfig"
        working-directory: ./terraform
        run: |
          ./cluster-config-write.sh
          mkdir ~/.kube
          cp cluster.yml ~/.kube/config
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.4'
      - name: "Get Databases"
        id: "get-databases"
        run: |
          kubectl get clusters.postgresql.cnpg.io -A -o yaml > clusters.yml
          yq '.items[].metadata | pick(["name", "namespace"])' clusters.yml -o json -I 0 > dbs.json
          sed -i '{:q;N;s/\n/, /g;t q}' dbs.json
          sed -i 's#^#[#' dbs.json
          sed -i 's#$#]#' dbs.json
          truncate -s -1 dbs.json
          echo "databases=$(cat dbs.json)" >> "$GITHUB_OUTPUT"

  hibernate:
    needs: [
      get-databases,
    ]
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        database: ${{ fromJson(needs.get-databases.outputs.databases) }}

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v4
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Generate and install kubeconfig"
        working-directory: ./terraform
        run: |
          ./cluster-config-write.sh
          mkdir ~/.kube
          cp cluster.yml ~/.kube/config
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.4'
      - name: "Hibernate DB"
        env:
          HIBERNATE_CHOICE: ${{ inputs.do-hibernate && 'on' || 'off' }}
        run: "kubectl -n ${{ matrix.database.namespace }} annotate clusters.postgresql.cnpg.io ${{ matrix.database.name }} --overwrite cnpg.io/hibernation=${{ env.HIBERNATE_CHOICE }}"
      - name: "Wait for hibernate"
        if: ${{ inputs.do-hibernate }}
        run: kubectl -n ${{ matrix.database.namespace }} wait clusters.postgresql.cnpg.io ${{ matrix.database.name }} --timeout 30m --for "jsonpath={.status.conditions[?(.type==\"cnpg.io/hibernation\")].status}=True"
      - name: "Wait for restart"
        if: ${{ !inputs.do-hibernate }}
        run: kubectl -n ${{ matrix.database.namespace }} wait clusters.postgresql.cnpg.io ${{ matrix.database.name }} --timeout 30m --for "jsonpath={.status.readyInstances}=$(kubectl -n ${{ matrix.database.namespace }} get clusters.postgresql.cnpg.io ${{ matrix.database.name }} -o "jsonpath={.status.instances}")"
