name: Nightly Backup
on:
  workflow_dispatch:
  schedule:
    - cron:  '0 2 * * *'

env:
  CLIENT_CERT_DATA: ${{ secrets.KUBE_CLIENT_CERT_DATA }}
  CLIENT_KEY_DATA: ${{ secrets.KUBE_CLIENT_KEY_DATA }}
  CLUSTER_CA_CERT_DATA: ${{ secrets.KUBE_CLUSTER_CA_CERT_DATA }}
  SERVER_KUBE_PORT: ${{ vars.SERVER_KUBE_PORT }}
  SERVER_BASE_DOMAIN: ${{ vars.SERVER_BASE_DOMAIN }}

jobs:
  check-server-up:
    runs-on: ubuntu-latest

    outputs:
      curl-code: ${{ steps.get-server-status.outputs.databases}}

    steps:
      - name: Get server status
        id: "get-server-status"
        run: |
          curl --max-time 5 https://ping.${{ vars.SERVER_BASE_DOMAIN }}
          echo "curl-code=$?" >> "$GITHUB_OUTPUT"

  hibernate-databases:
    needs: [
      check-server-up,
    ]
    uses: ./.github/workflows/databases-hibernate.yml
    secrets: inherit

    if: needs.check-server-up.outputs.curl-code == 0

    with:
      do-hibernate: true

  start-velero-backup:
    needs: [
      hibernate-databases,
    ]
    runs-on: self-hosted

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v4
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Generate and install kubeconfig"
        working-directory: ./terraform
        run: |
          ./cluster-config-write.sh
          mkdir ~/.kube
          cp cluster.yml ~/.kube/config
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.4'
      - name: "Install Velero CLI"
        env:
          VELERO_VERSION: 'v1.14.1'
        run: |
          mkdir velero
          curl https://github.com/vmware-tanzu/velero/releases/download/${{ env.VELERO_VERSION }}/velero-${{ env.VELERO_VERSION }}-linux-amd64.tar.gz -Lo velero.tar.gz
          tar -xvf velero.tar.gz -C ./velero --strip-components=1
          sudo cp ./velero/velero /usr/local/bin/velero
      - name: "Start backup"
        run: velero create backup --from-schedule nightly
      - name: "Wait for snapshots"
        run: |
          velero get backups -o yaml > backups.yml
          kubectl -n $(yq '.items[-1].metadata.namespace' backups.yml) wait backups.velero.io $(yq '.items[-1].metadata.name' backups.yml) --timeout 10m --for "jsonpath={.status.phase}=WaitingForPluginOperations"

  check-backup-success:
    needs: [
      start-velero-backup,
    ]
    runs-on: self-hosted

    timeout-minutes: 1380

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v4
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Generate and install kubeconfig"
        working-directory: ./terraform
        run: |
          ./cluster-config-write.sh
          mkdir ~/.kube
          cp cluster.yml ~/.kube/config
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.4'
      - name: "Install Velero CLI"
        env:
          VELERO_VERSION: 'v1.14.1'
        run: |
          mkdir velero
          curl https://github.com/vmware-tanzu/velero/releases/download/${{ env.VELERO_VERSION }}/velero-${{ env.VELERO_VERSION }}-linux-amd64.tar.gz -Lo velero.tar.gz
          tar -xvf velero.tar.gz -C ./velero --strip-components=1
          sudo cp ./velero/velero /usr/local/bin/velero
      - name: "Get backups to delete"
        id: "get-backups-to-delete"
        env:
          MAX_NUM_BACKUPS: 30
        run: |
          velero get backups -o yaml > backups.yml
          yq '.items[].metadata.name' backups.yml > backups.txt
          head -n -${{ env.MAX_NUM_BACKUPS }} backups.txt > backups-to-delete.txt
          truncate -s -1 backups-to-delete.txt
          sed -i '{:q;N;s/\n/ /g;t q}' backups-to-delete.txt
          echo "backups-to-delete=$(cat backups-to-delete.txt)" >> "$GITHUB_OUTPUT"
      - name: "Delete old backups"
        if: steps.get-backups-to-delete.outputs.backups-to-delete != ''
        run: velero delete backup ${{ steps.get-backups-to-delete.outputs.backups-to-delete }} --confirm
      - name: "Wait for backup to complete"
        timeout-minutes: 1380
        run: |
          velero get backups -o yaml > backups.yml
          kubectl -n $(yq '.items[-1].metadata.namespace' backups.yml) wait backups.velero.io $(yq '.items[-1].metadata.name' backups.yml) --timeout 23h --for "jsonpath={.status.phase}=Completed"

  restart-databases:
    needs: [
      start-velero-backup,
    ]
    uses: ./.github/workflows/databases-hibernate.yml
    secrets: inherit

    with:
      do-hibernate: false
