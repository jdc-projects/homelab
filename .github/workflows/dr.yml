name: Disaster Recovery
on:
  workflow_dispatch:

jobs:
  deploy-tf-state-namespace:
    uses: ./.github/workflows/kubernetes-manifest-deploy.yml
    secrets: inherit

    with:
      manifest-file: ./terraform/tf-state-namespace.yml
      runner-type: ubuntu-latest

  # if not a clean cluster: need to remove storageclasses and volumesnapshotclasses to enable openebs install
  # kubectl delete storageclass default openebs-device openebs-hostpath openebs-zfs-localpv-bulk openebs-zfs-localpv-bulk-no-backup openebs-zfs-localpv-general openebs-zfs-localpv-general-no-backup openebs-zfs-localpv-random openebs-zfs-localpv-random-no-backup
  # kubectl delete volumesnapshotclass openebs-zfs-localpv

  deploy-openebs:
    needs: [
      deploy-tf-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/openebs
      runner-type: ubuntu-latest

  deploy-github-org-runner:
    needs: [
      deploy-tf-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/github-org-runners
      runner-type: ubuntu-latest

  deploy-velero:
    needs: [
      deploy-tf-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/velero
      runner-type: ubuntu-latest
      extra-variable: is_restore_mode=true

  do-velero-restore:
    needs: [
      deploy-velero,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/velero-restore

  restart-databases:
    needs: [
      do-velero-restore,
    ]
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        # it would be nice to dynamically find these
        database:
          - name: "keycloak-db"
            namespace: "keycloak"
          - name: "vaultwarden-db"
            namespace: "vaultwarden"
          - name: "outline-db"
            namespace: "outline"
          - name: "penpot-db"
            namespace: "penpot"

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v4
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Setup node"
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: "Generate and install kubeconfig"
        working-directory: ./terraform
        run: |
          ./cluster-config-write.sh
          mkdir ~/.kube
          cp cluster.yml ~/.kube/config
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.4'
      - name: "Setup CNPG Plugin"
        env:
          CNPG_VERSION: 'v1.24.0'
        run: | # from https://cloudnative-pg.io/documentation/1.20/kubectl-plugin/#via-the-installation-script
          curl -sSfL \
          https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/${{ env.CNPG_VERSION }}/hack/install-cnpg-plugin.sh | \
          sudo sh -s -- -b /usr/local/bin
      - name: "Restart DB"
        run: "kubectl cnpg -n ${{ matrix.database.namespace }} hibernate off ${{ matrix.database.name }}"

  run-deploy:
    needs: [
      restart-databases,
    ]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
