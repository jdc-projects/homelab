name: Disaster Recover
on:
  workflow_dispatch:

env:
  CLIENT_CERT_DATA: ${{ secrets.KUBE_CLIENT_CERT_DATA }}
  CLIENT_KEY_DATA: ${{ secrets.KUBE_CLIENT_KEY_DATA }}
  CLUSTER_CA_CERT_DATA: ${{ secrets.KUBE_CLUSTER_CA_CERT_DATA }}
  SERVER_KUBE_PORT: ${{ vars.SERVER_KUBE_PORT }}
  SERVER_BASE_DOMAIN: ${{ vars.SERVER_BASE_DOMAIN }}

jobs:
  deploy-terraform-state-namespace:
    uses: ./.github/workflows/kubernetes-manifest-deploy.yml
    secrets: inherit

    with:
      manifest-file: ./terraform/terraform-state-namespace.yml
      runner-type: ubuntu-latest

  deploy-traefik-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/traefik
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.traefik

  deploy-github-org-runners-2-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/github-org-runners-2
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.runners_cache

  deploy-loki-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/loki
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.loki

  deploy-openldap-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/openldap
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.openldap

  deploy-keycloak-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/keycloak
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.keycloak_db

  deploy-harbor-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/harbor
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.harbor

  deploy-vaultwarden-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/vaultwarden
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.vaultwarden

  deploy-ocis-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/ocis
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.ocis

  deploy-grafana-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/grafana
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.grafana

  deploy-oauth2-proxy-storage:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/oauth2-proxy
      runner-type: ubuntu-latest
      resource-name: kubernetes_persistent_volume_claim.oauth2_proxy

  deploy-velero:
    needs: [
      deploy-terraform-state-namespace,
    ]
    uses: ./.github/workflows/kubernetes-terraform-deploy.yml
    secrets: inherit

    with:
      terraform-dir: ./terraform/velero
      runner-type: ubuntu-latest
      extra-variable: restore_mode=true

  restore:
    needs: [
      deploy-traefik-storage,
      deploy-github-org-runners-2-storage,
      deploy-loki-storage,
      deploy-openldap-storage,
      deploy-keycloak-storage,
      deploy-harbor-storage,
      deploy-vaultwarden-storage,
      deploy-ocis-storage,
      deploy-grafana-storage,
      deploy-oauth2-proxy-storage,
      deploy-velero,
    ]
    runs-on: ubuntu-latest

    steps:
      - name: "Repo checkout"
        uses: actions/checkout@v3
      - name: "Setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: "Setup kubectl"
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'
      - name: "Generate and install kubeconfig"
        working-directory: ./terraform
        run: |
          ./cluster-config-write.sh
          mkdir ~/.kube
          cp cluster.yml ~/.kube/config
      - name: "Add cluster CA certificate"
        run: "echo $CLUSTER_CA_CERT_DATA > cluster.cert.pem && sudo mkdir /usr/local/share/ca-certificates/extra && sudo cp cluster.cert.pem /usr/local/share/ca-certificates/extra/cluster.cert.crt && sudo update-ca-certificates"
      - name: "Install Velero CLI"
        run: |
          mkdir velero
          curl https://github.com/vmware-tanzu/velero/releases/download/v1.12.0/velero-v1.12.0-linux-amd64.tar.gz -Lo velero.tar.gz
          tar -xvf velero.tar.gz -C ./velero --strip-components=1
          cp ./velero/velero /usr/local/bin/velero
      - name: "Restore backup"
        run: velero restore create --from-schedule velero-nightly
